filter {
  if ([fields][log_type] == "dockerStats") {
    mutate {
      replace => { "[type]" => "dockerstats" }
    }
    grok {
      match => { "message" => [ "container:%{WORD:containerId}, name:%{WORD:name}-%{WORD:machine}, memoryRaw:%{NUMBER:memoryNow:float}%{NOTSPACE:unit} / %{NUMBER:memoryMax:float}%{NOTSPACE:unitTotal}, memoryPercent:%{NUMBER:memoryPercent:float}%, cpu:%{NUMBER:cpu:float}" ] }
    }
  } else if ([fields][log_type] == "diskUsage") {
    mutate {
      replace => { "[type]" => "diskusage" }
    }
    grok {
      match => { "message" => [ "total:%{NUMBER:total:float}%{NOTSPACE:unit} used:%{NUMBER:used:float}%{NOTSPACE:unit} available:%{NUMBER:available:float}%{NOTSPACE:unit}" ] }
    }
  }
}
#
#   grok {
#     match => { "message" => [ "container:%{WORD:containerId}, name:%{WORD:name}-%{WORD:machine}, memoryRaw:%{NUMBER:memoryNow:float}%{NOTSPACE:unit} / %{NUMBER:memoryMax:float}%{NOTSPACE:unitTotal}, memoryPercent:%{NUMBER:memoryPercent:float}%, cpu:%{NUMBER:cpu:float}", "total:%{NUMBER:total:float}%{NOTSPACE:unit} used:%{NUMBER:used:float}%{NOTSPACE:unit} available:%{NUMBER:available:float}%{NOTSPACE:unit}" ] }
#   }
#   syslog_pri { }
#   date {
#     match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
#   }
#   mutate {
#     remove_field => [ "message", "priority", "ts", "severity", "facility", "facility_label", "severity_label", "syslog5424_pri", "proc", "syslog_severity_code", "syslog_facility_code", "syslog_facility", "syslog_severity", "syslog_hostname", "syslog_message", "syslog_timestamp", "ver" ]
#   }
#   mutate {
#     remove_tag => [ "_grokparsefailure_sysloginput" ]
#     add_field => {"containerName" => "%{name}-%{machine}"}
#   }
#   if "memoryRaw" in [tags] {
#     mutate {
#       remove_field => [ "total", "used", "available"]
#     }
#   }
#   if "available" in [tags] {
#     mutate {
#       remove_field => [ "containerId", "memoryNow", "memoryMax", "memoryPercent", "cpu", "unit"]
#     }
#   }
#   mutate {
#     gsub => [
#       "service", "[0123456789-]", ""
#     ]
#   }
#   if [msg] =~ "^ *{" {
#     json {
#       source => "msg"
#     }
#     if "_jsonparsefailure" in [tags] {
#       drop {}
#     }
#     mutate {
#       remove_field => [ "msg" ]
#     }
#   }
# }
